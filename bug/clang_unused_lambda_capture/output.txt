+ clang++-6.0 --version
clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin

+ g++-7 --version
g++-7 (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


[ 0: constexpr auto& + non-generic lambda: works ]
test.cc

   #include <iostream>
   constexpr char top_doc[] = "Works";
   int main() {
     constexpr auto& doc = top_doc;
     [](int) { std::cout << doc << std::endl; }(1);
     return 0;
   }

+ clang++-6.0 -std=c++14 -Wall -Werror ./test.cc -o ./test
+ ./test
Works

+ g++-7 -std=c++14 -Wall -Werror ./test.cc -o ./test
+ ./test
Works
---


[ 1: constexpr auto& + generic lambda: fails in gcc ]
test.cc

   #include <iostream>
   constexpr char top_doc[] = "Works";
   int main() {
     constexpr auto& doc = top_doc;
     [](auto) { std::cout << doc << std::endl; }(1);
     return 0;
   }

+ clang++-6.0 -std=c++14 -Wall -Werror ./test.cc -o ./test
+ ./test
Works

+ g++-7 -std=c++14 -Wall -Werror ./test.cc -o ./test
./test.cc: In lambda function:
./test.cc:5:27: error: 'doc' is not captured
   [](auto) { std::cout << doc << std::endl; }(1);
                           ^~~
./test.cc:5:4: note: the lambda has no capture-default
   [](auto) { std::cout << doc << std::endl; }(1);
    ^
./test.cc:4:19: note: 'constexpr const char (& doc)[6]' declared here
   constexpr auto& doc = top_doc;
                   ^~~
---


[ 2: constexpr + non-generic lambda: fails in clang ]
test.cc

   #include <iostream>
   int main() {
     constexpr char doc[] = "Works";
     [](int) { std::cout << doc << std::endl; }(1);
     return 0;
   }

+ clang++-6.0 -std=c++14 -Wall -Werror ./test.cc -o ./test
./test.cc:4:26: error: variable 'doc' cannot be implicitly captured in a lambda with no capture-default specified
  [](int) { std::cout << doc << std::endl; }(1);
                         ^
./test.cc:3:18: note: 'doc' declared here
  constexpr char doc[] = "Works";
                 ^
./test.cc:4:3: note: lambda expression begins here
  [](int) { std::cout << doc << std::endl; }(1);
  ^
1 error generated.

+ g++-7 -std=c++14 -Wall -Werror ./test.cc -o ./test
+ ./test
Works
---


[ 3: constexpr + generic lambda: fails in clang ]
test.cc

   #include <iostream>
   int main() {
     constexpr char doc[] = "Works";
     [](auto) { std::cout << doc << std::endl; }(1);
     return 0;
   }

+ clang++-6.0 -std=c++14 -Wall -Werror ./test.cc -o ./test
./test.cc:4:27: error: variable 'doc' cannot be implicitly captured in a lambda with no capture-default specified
  [](auto) { std::cout << doc << std::endl; }(1);
                          ^
./test.cc:3:18: note: 'doc' declared here
  constexpr char doc[] = "Works";
                 ^
./test.cc:4:3: note: lambda expression begins here
  [](auto) { std::cout << doc << std::endl; }(1);
  ^
./test.cc:4:27: error: variable 'doc' cannot be implicitly captured in a lambda with no capture-default specified
  [](auto) { std::cout << doc << std::endl; }(1);
                          ^
./test.cc:4:46: note: in instantiation of function template specialization 'main()::(anonymous class)::operator()<int>' requested here
  [](auto) { std::cout << doc << std::endl; }(1);
                                             ^
./test.cc:3:18: note: 'doc' declared here
  constexpr char doc[] = "Works";
                 ^
./test.cc:4:3: note: lambda expression begins here
  [](auto) { std::cout << doc << std::endl; }(1);
  ^
2 errors generated.

+ g++-7 -std=c++14 -Wall -Werror ./test.cc -o ./test
+ ./test
Works
---


