#!/usr/bin/env python2

# NOTE: Used from a different project. Adapted for this repo.

"""
Runs Bazel binaries. As opposed to `bazel run` / `bazel test`, this permits
multiple binaries and by default preserves the current directory of the binary.
However, you must ensure you have built the desired target and use a
non-aliased target.
"""

from __future__ import print_function
import argparse
import os
import subprocess
import sys

workspace_name = "jupyter_integration"
sys.dont_write_bytecode = True


def bazel_package_abspath(workspace_abspath, cur_dir=None):
    """Returns absolute Bazel package path according to `cur_dir`."""
    if cur_dir is None:
        cur_dir = os.path.abspath(os.getcwd())
    assert not os.path.dirname(cur_dir).endswith(".runfiles"), (
        "This script should NOT be run under `bazel {run,test}`.")
    package_dir_relpath = os.path.relpath(cur_dir, workspace_abspath)
    assert not package_dir_relpath.startswith(".."), (
        "This script should be run under '{}'".format(workspace_abspath))
    # Resolve Bazel target path.
    if package_dir_relpath == ".":
        package_abspath = "//"
    else:
        assert not package_dir_relpath.startswith("..")
        package_abspath = "//" + package_dir_relpath
    return package_abspath


def bazel_target_abspath(target_relpath, package_abspath):
    """Resolve target to absolute path, expanding externals."""
    assert ":" in target_relpath, (
        "Must supply explicit Bazel target. Did you forget the ':'?")
    if target_relpath.startswith("@"):
        # Use external.
        pieces = target_relpath.split("//")
        assert len(pieces) == 2
        base, sub = pieces
        if not sub.startswith(":"):
            sub = "/" + sub
        target_abspath = "//external/" + base[1:] + sub
    elif not target_relpath.startswith("//"):
        # Use relative path.
        target_abspath = package_abspath + target_relpath
    else:
        # Use supplied path.
        target_abspath = target_relpath
    return target_abspath


def bazel_binary_info(workspace_abspath, workspace_name, target_abspath):
    """Resolves a target's binary and runfiles."""
    # TODO(eric.cousineau): If an alias, resolve to actual target.
    # Resolve binary path.
    assert target_abspath.startswith("//")
    assert ":" in target_abspath
    binary_relpath = target_abspath[2:].replace(":", "/")
    binary_abspath = os.path.join(
        workspace_abspath, "bazel-bin", binary_relpath.lstrip("/"))
    assert os.path.exists(binary_abspath), (
        ("Target '{}' does not have file '{}'. Is it not yet built, " +
         "or is it an alias?").format(target_abspath, binary_abspath))
    # Resolve absolute runfiles file path.
    runfiles_abspath = os.path.join(
        binary_abspath + ".runfiles", workspace_name)
    assert os.path.isdir(runfiles_abspath), (
        "Target '{}' does not have runfiles '{}'?".format(
            target_abspath, runfiles_abspath))
    return binary_abspath, runfiles_abspath


def bazel_external_info(workspace_abspath, external_name):
    """Returns path to source directory of an external."""
    workspace_basename = os.path.basename(workspace_abspath)
    external_abspath = os.path.join(
        workspace_abspath, "bazel-" + workspace_basename, "external",
        external_name)
    return external_abspath


def eprint(*args):
    print(*args, file=sys.stderr)


def execv_or_run_under(binary_abspath, argparse_args):
    """Runs binary_abspath, accounting for the user's argparse choices.
    N.B. Replaces current process with target process."""
    argv = [binary_abspath] + argparse_args.args
    if argparse_args.run_under:
        # Replace current binary with first argument of --run_under.
        # TODO(eric.cousineau): Ensure this honors shell parsing, like quotes.
        argv = argparse_args.run_under.split() + argv
        binary_abspath = argv[0]
        if "/" not in binary_abspath:
            binary_abspath = "/usr/bin/" + binary_abspath
        argv[0] = binary_abspath
    if not os.access(argv[0], os.X_OK):
        raise RuntimeError("Missing or not executable: " + argv[0])
    if argparse_args.verbose:
        eprint("execv: {}".format(" ".join(argv)))
        eprint("---")
    os.execv(binary_abspath, argv)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "target", type=str, help="Bazel target. Can use relative paths.")
    parser.add_argument(
        "--cd", action="store_true",
        help="Set PWD to .runfiles directory. Otherwise, downstream " +
             "binaries should rely on ANZU_BAZEL_RUNFILES being set.")
    parser.add_argument(
        "-v", "--verbose", action="store_true",
        help="Show verbose output (such as workspace and binary information).")
    parser.add_argument(
        "--run_under", type=str, default="",
        help="Run binary prefixed with arguments. This uses shell parsing, " +
             "so be wary of spaces and quotes.")
    parser.add_argument("args", nargs=argparse.REMAINDER)
    args = parser.parse_args()

    # Resolve workspace, absolute target path, and binary.
    workspace_abspath = os.path.dirname(os.path.abspath(__file__))
    package_abspath = bazel_package_abspath(workspace_abspath)
    target_abspath = bazel_target_abspath(args.target, package_abspath)
    binary_abspath, runfiles_abspath = bazel_binary_info(
        workspace_abspath, workspace_name, target_abspath)

    if args.verbose:
        eprint("workspace_abspath={}".format(workspace_abspath))
        eprint("package_abspath={}".format(package_abspath))
        eprint("target_relpath={}".format(args.target))
        eprint("target_abspath={}".format(target_abspath))
        eprint("binary_abspath={}".format(binary_abspath))
        eprint("runfiles_abspath={}".format(runfiles_abspath))

    # Export environment.
    os.environ["BAZEL_RUNFILES"] = runfiles_abspath
    if args.verbose:
        eprint("export BAZEL_RUNFILES={}".format(runfiles_abspath))

    # Change directory to runfiles, if requested.
    if args.cd:
        os.chdir(runfiles_abspath)
        if args.verbose:
            eprint("cd '{}'".format(runfiles_abspath))

    # Execute.
    execv_or_run_under(binary_abspath, args)
 