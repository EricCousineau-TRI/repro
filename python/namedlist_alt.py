# Alternative impl, motivated by: https://bitbucket.org/ericvsmith/namedlist
from collections import namedtuple
import ctypes

import numpy as np


class NamedViewBase(object):
    """Base class for classes generated by ``namedview``."""
    _fields = None

    def __init__(self, obj):
        assert self._fields is not None, (
            "Class must be generated by ``namedview``")
        assert len(self._fields) == len(obj)
        object.__setattr__(self, '_obj', obj)

    @classmethod
    def get_fields(cls):
        return cls._fields

    def __getitem__(self, index):
        return self._obj.__getitem__(index)

    def __setitem__(self, index, value):
        self._obj.__setitem__(index, value)

    def __setattr__(self, name, value):
        if not hasattr(self, name):
            raise AttributeError("Cannot add attributes!")
        object.__setattr__(self, name, value)

    def __len__(self):
        return self._obj.__len__

    def __iter__(self):
        return self._obj.__iter__()

    def __array__(self):
        return np.asarray(self._obj)

    def __repr__(self):
        value_strs = []
        for i, field in enumerate(self._fields):
            value_strs.append("{}={}".format(field, repr(self._obj[i])))
        return "{}({})".format(self.__class__.__name__, ", ".join(value_strs))

    @staticmethod
    def _item_property(index):
        return property(
            fget=lambda self: self.__getitem__(index),
            fset=lambda self, value: self.__setitem__(index, value))


def namedview(name, fields):
    type_dict = dict(_fields=tuple(fields))
    for i, field in enumerate(fields):
        type_dict[field] = NamedViewBase._item_property(i)
    cls = type(name, (NamedViewBase,), type_dict)
    return cls


def is_same_array(a, b):
    # https://stackoverflow.com/questions/43885090/comparing-numpy-object-references
    return (a.shape == b.shape) and (a == b).all() and a.ctypes.data == b.ctypes.data


def test_main():
    MyView = namedview("MyView", ['a', 'b', 'c'])
    MyTuple = namedtuple("MyTuple", ['a', 'b', 'c'])

    print(MyView)
    print(MyTuple)

    print("[ Simple List ]")
    value = [1, 2, 3]
    view = MyView(value)
    print(MyTuple._fields)
    print(MyView.get_fields())
    print(view.get_fields())
    print(view.a)
    view[0] = 10
    print(view.a)
    view[1] = -100
    view.c = 1000

    tup = MyTuple(a=1, b=2, c=3)
    print(tup)

    print(view)
    print(value)
    view[:] = [111, 222, 333]
    print(view)
    print(value)
    try:
        view.bad_value = 1
        assert False
    except AttributeError:
        pass

    # Ensure compatibility with `np.array`, with minimal copying.
    X = np.asarray(view)
    print(repr(X))
    assert isinstance(X, np.ndarray)
    assert X.shape == (3,)

    print("[ Array 1D ]")
    array = np.array([4, 5, 6])
    aview = MyView(array)
    print(aview.a)
    aview[[1, 2]] = [50, 60]
    print(array)
    print(aview)
    # - Ensure minimal copying.
    assert is_same_array(array, np.asarray(aview))
    assert not is_same_array(array, np.array([4, 5, 6]))

    # Maybe not useful, but meh.
    print("[ Array 2D ]")
    mat = np.eye(3)
    mview = MyView(mat)
    print(mview)
    print(mview.a)
    print(mview[0, 0])
    mview.a[0] = 10
    print(mview.b)
    print(mat)


"""
Example output:

<class '__main__.MyView'>
<class '__main__.MyTuple'>
[ Simple List ]
('a', 'b', 'c')
('a', 'b', 'c')
('a', 'b', 'c')
1
10
MyTuple(a=1, b=2, c=3)
MyView(a=10, b=-100, c=1000)
[10, -100, 1000]
MyView(a=111, b=222, c=333)
[111, 222, 333]
array([111, 222, 333])
[ Array 1D ]
4
[ 4 50 60]
MyView(a=4, b=50, c=60)
[ Array 2D ]
MyView(a=array([ 1.,  0.,  0.]), b=array([ 0.,  1.,  0.]), c=array([ 0.,  0.,  1.]))
[ 1.  0.  0.]
1.0
[ 0.  1.  0.]
[[ 10.   0.   0.]
 [  0.   1.   0.]
 [  0.   0.   1.]]
"""


if __name__ == "__main__":
    test_main()
