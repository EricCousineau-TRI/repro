Types
<TemplateFunction pymodule.tpl._scalar_type.template_type>
template_type: int
template_type: double
template_list: 
- int
template_list: 
- int
- double
- scalar_type::SimpleType
---
Class
<TemplateClass pymodule.tpl._scalar_type.SimpleTemplate>
<class 'pymodule.tpl._scalar_type.SimpleTemplate[int]'>
<class 'pymodule.tpl._scalar_type.SimpleTemplate[int, float, pymodule.tpl._scalar_type.SimpleType]'>
3
check: 1 0 1 
<unbound TemplateMethod SimpleTemplate[int, float, pymodule.tpl._scalar_type.SimpleType].check>
<unbound method SimpleTemplate[int, float, pymodule.tpl._scalar_type.SimpleType].check[float]>
<bound TemplateMethod SimpleTemplate[int, float, pymodule.tpl._scalar_type.SimpleType].check of <pymodule.tpl._scalar_type.SimpleTemplate[int, float, pymodule.tpl._scalar_type.SimpleType] object at 0x7fdc8a09ec30>>
<bound method SimpleTemplate[int, float, pymodule.tpl._scalar_type.SimpleType].check[float] of <pymodule.tpl._scalar_type.SimpleTemplate[int, float, pymodule.tpl._scalar_type.SimpleType] object at 0x7fdc8a09ec30>>
---
Literals
<TemplateFunction pymodule.tpl._scalar_type.template_bool>
[(False,), (True,)]
template_bool: 0
template_bool: 1
template_bool: 0
template_bool: 1
<TemplateFunction pymodule.tpl._scalar_type.template_int>
[(0,), (1,), (2,), (5,)]
template_int: 0
template_int: 1
template_int: 2
template_int: 5
---
<class '__main__.ChildTpl[int, float]'>
<class '__main__.ChildTpl[int, float]'>
<class '__main__.ChildTpl[float, int]'>
<class '__main__.ChildDirect'>
py direct: pure [ChildDirect]
py direct: optional [ChildDirect]
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[int, float]]:
value = 3
 .t = 2
 .u = 5.5
  py direct: pure [ChildDirect]
  = 1
  py direct: optional [ChildDirect]
  = 2
---
<class '__main__.ChildTpl[int, float]'>
py: pure [ChildTpl[int, float]]
py: optional [ChildTpl[int, float]]
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[int, float]]:
value = 3
 .t = 2
 .u = 5.5
  py: pure [ChildTpl[int, float]]
  = 6
  py: optional [ChildTpl[int, float]]
  = 9
---
<class '__main__.ChildTpl[float, int]'>
py: pure [ChildTpl[float, int]]
py: optional [ChildTpl[float, int]]
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[float, int]]:
value = 1.5
 .t = 2
 .u = 5
  py: pure [ChildTpl[float, int]]
  = 3
  py: optional [ChildTpl[float, int]]
  = 4
---
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[int, float]]:
value = 10
 .t = 2
 .u = 5.5
  py direct: pure [ChildDirect]
  = 1
  py direct: optional [ChildDirect]
  = 2
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[int, float]]:
value = 10
 .t = 2
 .u = 5.5
  py: pure [ChildTpl[int, float]]
  = 20
  py: optional [ChildTpl[int, float]]
  = 30
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[float, int]]:
value = 10
 .t = 2
 .u = 5
  py: pure [ChildTpl[float, int]]
  = 20
  py: optional [ChildTpl[float, int]]
  = 30
---
Check
cpp call
<__main__.ChildTpl[float, int] object at 0x7fdc89e22600>
cpp convert
dispatch
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[float, int]]:
value = 3.5
 .t = 6.5
 .u = 3
  py: pure [ChildTpl[float, int]]
  = 7
  py: optional [ChildTpl[float, int]]
  = 10
Good
---
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[int, float]]:
value = 3
 .t = 2
 .u = 5.5
  py: pure [ChildTpl[int, float]]
  = 6
  py: optional [ChildTpl[int, float]]
  = 9
Attempt conversion
Got it
Try dispatch
cpp.dispatch [pymodule.tpl._scalar_type.BaseTpl[float, int]]:
value = 2.5
 .t = 2
 .u = 5
  py: pure [ChildTpl[float, int]]
  = 5
  py: optional [ChildTpl[float, int]]
  = 7
Good to go
Base::~Base
Base::~Base
Base::~Base
Base::~Base
Base::~Base
